function t(t,e,o,n){return new(o||(o=Promise))(function(i,r){function a(t){try{c(n.next(t))}catch(t){r(t)}}function s(t){try{c(n.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o(function(t){t(e)})).then(a,s)}c((n=n.apply(t,e||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const e=new Map;function o(o){return t(this,void 0,void 0,function*(){if(e.has(o))return e.get(o);const t=document.createElement("canvas");if(!t.getContext("2d"))throw new Error("Failed to get canvas context");try{const n=`image/${o}`;return new Promise(i=>{t.toBlob(t=>{const r=null!==t&&t.type===n;e.set(o,r),i(r)},n,1)})}catch(t){return e.set(o,!1),!1}})}function n(e,n){return t(this,void 0,void 0,function*(){return function(e,n){return t(this,void 0,void 0,function*(){var i;const{maxSizeMB:r=.1,quality:a=.9,maxWidth:s=800,maxHeight:c=null,downscaleDivisor:l=5,preferredFormat:u="webp",preserveExif:d=!1,resizeMode:m="contain",minQuality:h=.1,progressive:f=!1,debug:p=!1,outputFilename:g}=n,w=p?console.log.bind(console,"[ImageCompression]"):()=>{};w("Compression started");const v=c||s,y=1024*r*1024,$=yield Promise.all([u,"webp","avif","png","jpeg"].map(e=>t(this,void 0,void 0,function*(){return{format:e,supported:yield o(e)}}))),x=(null===(i=$.find(t=>t.supported))||void 0===i?void 0:i.format)||"jpeg";w(`Using format: ${x}`);const M=yield createImageBitmap(e);let b=M.width,F=M.height;(b>s*l||F>v*l)&&(b=Math.floor(b/l),F=Math.floor(F/l),console.log(`Quick downscale by divisor ${l} to ${b}x${F}`));let E=Math.min(s/b,v/F,1),z=Math.round(b*E),B=Math.round(F*E);const C=`image/${x}`,S="jpeg"===x?"jpg":x;w(`Output format: ${C}`);const j=e=>t(this,void 0,void 0,function*(){let t=h,o=a,n=null;for(;t<=o;){const i=(t+o)/2,r=yield new Promise(t=>e.toBlob(t,C,i));if(!r)throw new Error(`Compression failed for ${C}`);r.size<=y?(n=r,t=i+.05):o=i-.05}if(!n)throw new Error("Failed to compress image within size constraints");return n}),k=(t,e)=>{const o=document.createElement("canvas");o.width=t,o.height=e;const n=o.getContext("2d");if(!n)throw new Error("Failed to get canvas context");let i=M.width,r=M.height,a=0,s=0,c=t,l=e;switch(m){case"contain":const o=Math.min(t/i,e/r);c=i*o,l=r*o,a=(t-c)/2,s=(e-l)/2;break;case"cover":const n=Math.max(t/i,e/r);c=i*n,l=r*n,a=(t-c)/2,s=(e-l)/2;break;case"inside":const u=Math.min(t/i,e/r,1);c=i*u,l=r*u,a=(t-c)/2,s=(e-l)/2;break;case"outside":const d=Math.max(t/i,e/r,1);c=i*d,l=r*d,a=(t-c)/2,s=(e-l)/2}return n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.drawImage(M,a,s,c,l),o};let P=null;for(;!P;){const t=k(z,B);P=yield j(t),(!P||P.size>y)&&(console.warn(`Still too big (${P?(P.size/1024).toFixed(1):"??"}KB), downscaling further`),z=Math.floor(.9*z),B=Math.floor(.9*B),P=null)}const Q=g||(e instanceof File?`${e.name.split(".")[0]}.${S}`:`image.${S}`),I=new File([P],Q,{type:P.type});return w(`âœ… Compression complete:\n    - Final size: ${(P.size/1024).toFixed(1)}KB\n    - Dimensions: ${z}x${B}\n    - Format: ${x}\n    - Filename: ${Q}\n    - Quality: ${a}`),I})}(e,n)})}export{n as compress};
//# sourceMappingURL=image-compression.esm.js.map
