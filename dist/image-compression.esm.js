function t(t,e,o,n){return new(o||(o=Promise))(function(i,r){function a(t){try{c(n.next(t))}catch(t){r(t)}}function s(t){try{c(n.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof o?e:new o(function(t){t(e)})).then(a,s)}c((n=n.apply(t,e||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const e=new Map;function o(o){return t(this,void 0,void 0,function*(){if(e.has(o))return e.get(o);const t=document.createElement("canvas");if(!t.getContext("2d"))throw new Error("Failed to get canvas context");try{const n=`image/${o}`;return new Promise(i=>{t.toBlob(t=>{const r=null!==t&&t.type===n;e.set(o,r),i(r)},n,1)})}catch(t){return e.set(o,!1),!1}})}function n(e,n){return t(this,void 0,void 0,function*(){return function(e,n){return t(this,void 0,void 0,function*(){var i;const{maxSizeMB:r=.1,quality:a=.9,maxWidth:s=800,maxHeight:c=null,downscaleDivisor:l=5,preferredFormat:d="webp",preserveExif:u=!1,resizeMode:f="contain",minQuality:m=.1,progressive:h=!1,debug:p=!1,outputFilename:g}=n,w=p?console.log.bind(console,"[ImageCompression]"):()=>{};w("Compression started");const v=c||s,$=1024*r*1024,y=.9,x=yield Promise.all([d,"webp","avif","png","jpeg"].map(e=>t(this,void 0,void 0,function*(){return{format:e,supported:yield o(e)}})));let M=(null===(i=x.find(t=>t.supported))||void 0===i?void 0:i.format)||"jpeg";w(`Using format: ${M}`);const b=yield createImageBitmap(e);let E=b.width,F=b.height;(E>s*l||F>v*l)&&(E=Math.floor(E/l),F=Math.floor(F/l),console.log(`Quick downscale by divisor ${l} to ${E}x${F}`));let z=Math.min(s/E,v/F,1),C=Math.round(E*z),j=Math.round(F*z),B=`image/${M}`,P="jpeg"===M?"jpg":M;w(`Output format: ${B}`);const S=e=>t(this,void 0,void 0,function*(){if("png"===M){const t=yield new Promise(t=>e.toBlob(t,B));if(!t)throw new Error(`Compression failed for ${B}`);if(t.size>$)throw new Error("PNG image too large - consider using a lossy format or reducing dimensions");return t}let t=m,o=a,n=null;for(;t<=o;){const i=(t+o)/2,r=yield new Promise(t=>e.toBlob(t,B,i));if(!r)throw new Error(`Compression failed for ${B}`);r.size<=$?(n=r,t=i+.05):o=i-.05}if(!n)throw new Error("Failed to compress image within size constraints");return n}),k=(t,e)=>{const o=document.createElement("canvas");o.width=t,o.height=e;const n=o.getContext("2d");if(!n)throw new Error("Failed to get canvas context");let i=b.width,r=b.height,a=0,s=0,c=t,l=e;switch(f){case"contain":const o=Math.min(t/i,e/r);c=i*o,l=r*o,a=(t-c)/2,s=(e-l)/2;break;case"cover":const n=Math.max(t/i,e/r);c=i*n,l=r*n,a=(t-c)/2,s=(e-l)/2;break;case"inside":const d=Math.min(t/i,e/r,1);c=i*d,l=r*d,a=(t-c)/2,s=(e-l)/2;break;case"outside":const u=Math.max(t/i,e/r,1);c=i*u,l=r*u,a=(t-c)/2,s=(e-l)/2}return n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.drawImage(b,a,s,c,l),o};let Q=null,I=0;for(;!Q&&I<3;){try{const t=k(C,j);Q=yield S(t)}catch(t){if(I++,"png"===M&&1===I){const t=x.find(t=>t.supported&&"png"!==t.format&&["jpeg","webp","avif"].includes(t.format));if(t){w(`PNG too large, falling back to ${t.format}`);const e=t.format;M=e,B=`image/${e}`,P="jpeg"===e?"jpg":e,w(`Switched to format: ${B}`);continue}}if(!(I<3))throw t;console.warn(`Compression attempt ${I} failed, downscaling further`),C=Math.floor(C*y),j=Math.floor(j*y),Q=null}(!Q||Q.size>$)&&(console.warn(`Still too big (${Q?(Q.size/1024).toFixed(1):"??"}KB), downscaling further`),C=Math.floor(C*y),j=Math.floor(j*y),Q=null)}const D=g||(e instanceof File?`${e.name.split(".")[0]}.${P}`:`image.${P}`);if(!Q)throw new Error("Failed to compress image - no valid output generated");const G=new File([Q],D,{type:Q.type});return w(`âœ… Compression complete:\n    - Final size: ${(Q.size/1024).toFixed(1)}KB\n    - Dimensions: ${C}x${j}\n    - Format: ${M}\n    - Filename: ${D}\n    - Quality: ${a}`),G})}(e,n)})}export{n as compress};
//# sourceMappingURL=image-compression.esm.js.map
