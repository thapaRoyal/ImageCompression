"use strict";function e(e,t,o,n){return new(o||(o=Promise))(function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function s(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o(function(e){e(t)})).then(a,s)}c((n=n.apply(e,t||[])).next())})}Object.defineProperty(exports,"__esModule",{value:!0}),"function"==typeof SuppressedError&&SuppressedError;const t=new Map;function o(o){return e(this,void 0,void 0,function*(){if(t.has(o))return t.get(o);const e=document.createElement("canvas");if(!e.getContext("2d"))throw new Error("Failed to get canvas context");try{const n=`image/${o}`;return new Promise(i=>{e.toBlob(e=>{const r=null!==e&&e.type===n;t.set(o,r),i(r)},n,1)})}catch(e){return t.set(o,!1),!1}})}exports.compress=function(t,n){return e(this,void 0,void 0,function*(){return function(t,n){return e(this,void 0,void 0,function*(){var i;const{maxSizeMB:r=.1,quality:a=.9,maxWidth:s=800,maxHeight:c=null,downscaleDivisor:l=5,preferredFormat:d="webp",preserveExif:u=!1,resizeMode:f="contain",minQuality:m=.1,progressive:p=!1,debug:h=!1,outputFilename:g}=n,w=h?console.log.bind(console,"[ImageCompression]"):()=>{};w("Compression started");const v=c||s,$=1024*r*1024,y=.9,x=yield Promise.all([d,"webp","avif","png","jpeg"].map(t=>e(this,void 0,void 0,function*(){return{format:t,supported:yield o(t)}})));let M=(null===(i=x.find(e=>e.supported))||void 0===i?void 0:i.format)||"jpeg";w(`Using format: ${M}`);const b=yield createImageBitmap(t);let E=b.width,F=b.height;(E>s*l||F>v*l)&&(E=Math.floor(E/l),F=Math.floor(F/l),console.log(`Quick downscale by divisor ${l} to ${E}x${F}`));let z=Math.min(s/E,v/F,1),j=Math.round(E*z),C=Math.round(F*z),P=`image/${M}`,B="jpeg"===M?"jpg":M;w(`Output format: ${P}`);const S=t=>e(this,void 0,void 0,function*(){if("png"===M){const e=yield new Promise(e=>t.toBlob(e,P));if(!e)throw new Error(`Compression failed for ${P}`);if(e.size>$)throw new Error("PNG image too large - consider using a lossy format or reducing dimensions");return e}let e=m,o=a,n=null;for(;e<=o;){const i=(e+o)/2,r=yield new Promise(e=>t.toBlob(e,P,i));if(!r)throw new Error(`Compression failed for ${P}`);r.size<=$?(n=r,e=i+.05):o=i-.05}if(!n)throw new Error("Failed to compress image within size constraints");return n}),k=(e,t)=>{const o=document.createElement("canvas");o.width=e,o.height=t;const n=o.getContext("2d");if(!n)throw new Error("Failed to get canvas context");let i=b.width,r=b.height,a=0,s=0,c=e,l=t;switch(f){case"contain":const o=Math.min(e/i,t/r);c=i*o,l=r*o,a=(e-c)/2,s=(t-l)/2;break;case"cover":const n=Math.max(e/i,t/r);c=i*n,l=r*n,a=(e-c)/2,s=(t-l)/2;break;case"inside":const d=Math.min(e/i,t/r,1);c=i*d,l=r*d,a=(e-c)/2,s=(t-l)/2;break;case"outside":const u=Math.max(e/i,t/r,1);c=i*u,l=r*u,a=(e-c)/2,s=(t-l)/2}return n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.drawImage(b,a,s,c,l),o};let Q=null,I=0;for(;!Q&&I<3;){try{const e=k(j,C);Q=yield S(e)}catch(e){if(I++,"png"===M&&1===I){const e=x.find(e=>e.supported&&"png"!==e.format&&["jpeg","webp","avif"].includes(e.format));if(e){w(`PNG too large, falling back to ${e.format}`);const t=e.format;M=t,P=`image/${t}`,B="jpeg"===t?"jpg":t,w(`Switched to format: ${P}`);continue}}if(!(I<3))throw e;console.warn(`Compression attempt ${I} failed, downscaling further`),j=Math.floor(j*y),C=Math.floor(C*y),Q=null}(!Q||Q.size>$)&&(console.warn(`Still too big (${Q?(Q.size/1024).toFixed(1):"??"}KB), downscaling further`),j=Math.floor(j*y),C=Math.floor(C*y),Q=null)}const D=g||(t instanceof File?`${t.name.split(".")[0]}.${B}`:`image.${B}`);if(!Q)throw new Error("Failed to compress image - no valid output generated");const G=new File([Q],D,{type:Q.type});return w(`âœ… Compression complete:\n    - Final size: ${(Q.size/1024).toFixed(1)}KB\n    - Dimensions: ${j}x${C}\n    - Format: ${M}\n    - Filename: ${D}\n    - Quality: ${a}`),G})}(t,n)})};
//# sourceMappingURL=image-compression.cjs.js.map
