var ImageCompression=function(e){"use strict";function t(e,t,o,n){return new(o||(o=Promise))(function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function s(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof o?t:new o(function(e){e(t)})).then(a,s)}c((n=n.apply(e,t||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const o=new Map;function n(e){return t(this,void 0,void 0,function*(){if(o.has(e))return o.get(e);const t=document.createElement("canvas");if(!t.getContext("2d"))throw new Error("Failed to get canvas context");try{const n=`image/${e}`;return new Promise(i=>{t.toBlob(t=>{const r=null!==t&&t.type===n;o.set(e,r),i(r)},n,1)})}catch(t){return o.set(e,!1),!1}})}return e.compress=function(e,o){return t(this,void 0,void 0,function*(){return function(e,o){return t(this,void 0,void 0,function*(){var i;const{maxSizeMB:r=.1,quality:a=.9,maxWidth:s=800,maxHeight:c=null,downscaleDivisor:l=5,preferredFormat:u="webp",preserveExif:d=!1,resizeMode:f="contain",minQuality:m=.1,progressive:h=!1,debug:p=!1,outputFilename:g}=o,w=p?console.log.bind(console,"[ImageCompression]"):()=>{};w("Compression started");const v=c||s,$=1024*r*1024,y=.9,M=yield Promise.all([u,"webp","avif","png","jpeg"].map(e=>t(this,void 0,void 0,function*(){return{format:e,supported:yield n(e)}})));let b=(null===(i=M.find(e=>e.supported))||void 0===i?void 0:i.format)||"jpeg";w(`Using format: ${b}`);const x=yield createImageBitmap(e);let E=x.width,F=x.height;(E>s*l||F>v*l)&&(E=Math.floor(E/l),F=Math.floor(F/l),console.log(`Quick downscale by divisor ${l} to ${E}x${F}`));let z=Math.min(s/E,v/F,1),C=Math.round(E*z),j=Math.round(F*z),P=`image/${b}`,B="jpeg"===b?"jpg":b;w(`Output format: ${P}`);const S=e=>t(this,void 0,void 0,function*(){if("png"===b){const t=yield new Promise(t=>e.toBlob(t,P));if(!t)throw new Error(`Compression failed for ${P}`);if(t.size>$)throw new Error("PNG image too large - consider using a lossy format or reducing dimensions");return t}let t=m,o=a,n=null;for(;t<=o;){const i=(t+o)/2,r=yield new Promise(t=>e.toBlob(t,P,i));if(!r)throw new Error(`Compression failed for ${P}`);r.size<=$?(n=r,t=i+.05):o=i-.05}if(!n)throw new Error("Failed to compress image within size constraints");return n}),k=(e,t)=>{const o=document.createElement("canvas");o.width=e,o.height=t;const n=o.getContext("2d");if(!n)throw new Error("Failed to get canvas context");let i=x.width,r=x.height,a=0,s=0,c=e,l=t;switch(f){case"contain":const o=Math.min(e/i,t/r);c=i*o,l=r*o,a=(e-c)/2,s=(t-l)/2;break;case"cover":const n=Math.max(e/i,t/r);c=i*n,l=r*n,a=(e-c)/2,s=(t-l)/2;break;case"inside":const u=Math.min(e/i,t/r,1);c=i*u,l=r*u,a=(e-c)/2,s=(t-l)/2;break;case"outside":const d=Math.max(e/i,t/r,1);c=i*d,l=r*d,a=(e-c)/2,s=(t-l)/2}return n.imageSmoothingEnabled=!0,n.imageSmoothingQuality="high",n.drawImage(x,a,s,c,l),o};let I=null,Q=0;for(;!I&&Q<3;){try{const e=k(C,j);I=yield S(e)}catch(e){if(Q++,"png"===b&&1===Q){const e=M.find(e=>e.supported&&"png"!==e.format&&["jpeg","webp","avif"].includes(e.format));if(e){w(`PNG too large, falling back to ${e.format}`);const t=e.format;b=t,P=`image/${t}`,B="jpeg"===t?"jpg":t,w(`Switched to format: ${P}`);continue}}if(!(Q<3))throw e;console.warn(`Compression attempt ${Q} failed, downscaling further`),C=Math.floor(C*y),j=Math.floor(j*y),I=null}(!I||I.size>$)&&(console.warn(`Still too big (${I?(I.size/1024).toFixed(1):"??"}KB), downscaling further`),C=Math.floor(C*y),j=Math.floor(j*y),I=null)}const D=g||(e instanceof File?`${e.name.split(".")[0]}.${B}`:`image.${B}`);if(!I)throw new Error("Failed to compress image - no valid output generated");const G=new File([I],D,{type:I.type});return w(`âœ… Compression complete:\n    - Final size: ${(I.size/1024).toFixed(1)}KB\n    - Dimensions: ${C}x${j}\n    - Format: ${b}\n    - Filename: ${D}\n    - Quality: ${a}`),G})}(e,o)})},Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=image-compression.umd.js.map
